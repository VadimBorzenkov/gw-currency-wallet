// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/VadimBorzenkov/gw-currency-wallet/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(user *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), user)
}

// CreateWallet mocks base method.
func (m *MockRepository) CreateWallet(wallet *models.Wallet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", wallet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockRepositoryMockRecorder) CreateWallet(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockRepository)(nil).CreateWallet), wallet)
}

// DeleteRefreshTokenModel mocks base method.
func (m *MockRepository) DeleteRefreshTokenModel(ctx context.Context, refreshToken *models.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenModel", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenModel indicates an expected call of DeleteRefreshTokenModel.
func (mr *MockRepositoryMockRecorder) DeleteRefreshTokenModel(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenModel", reflect.TypeOf((*MockRepository)(nil).DeleteRefreshTokenModel), ctx, refreshToken)
}

// GetRefreshTokenModelByID mocks base method.
func (m *MockRepository) GetRefreshTokenModelByID(ctx context.Context, userID uint64, deviceID string) (*models.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenModelByID", ctx, userID, deviceID)
	ret0, _ := ret[0].(*models.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenModelByID indicates an expected call of GetRefreshTokenModelByID.
func (mr *MockRepositoryMockRecorder) GetRefreshTokenModelByID(ctx, userID, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenModelByID", reflect.TypeOf((*MockRepository)(nil).GetRefreshTokenModelByID), ctx, userID, deviceID)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(userID uint64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), username)
}

// GetWalletByID mocks base method.
func (m *MockRepository) GetWalletByID(walletID uint64) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", walletID)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockRepositoryMockRecorder) GetWalletByID(walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockRepository)(nil).GetWalletByID), walletID)
}

// GetWalletByUserAndCurrency mocks base method.
func (m *MockRepository) GetWalletByUserAndCurrency(userID uint64, currency string) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserAndCurrency", userID, currency)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserAndCurrency indicates an expected call of GetWalletByUserAndCurrency.
func (mr *MockRepositoryMockRecorder) GetWalletByUserAndCurrency(userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserAndCurrency", reflect.TypeOf((*MockRepository)(nil).GetWalletByUserAndCurrency), userID, currency)
}

// GetWalletsByUserID mocks base method.
func (m *MockRepository) GetWalletsByUserID(userID uint64) ([]*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsByUserID", userID)
	ret0, _ := ret[0].([]*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsByUserID indicates an expected call of GetWalletsByUserID.
func (mr *MockRepositoryMockRecorder) GetWalletsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsByUserID", reflect.TypeOf((*MockRepository)(nil).GetWalletsByUserID), userID)
}

// SetRefreshTokenModel mocks base method.
func (m *MockRepository) SetRefreshTokenModel(ctx context.Context, refreshToken *models.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRefreshTokenModel", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRefreshTokenModel indicates an expected call of SetRefreshTokenModel.
func (mr *MockRepositoryMockRecorder) SetRefreshTokenModel(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshTokenModel", reflect.TypeOf((*MockRepository)(nil).SetRefreshTokenModel), ctx, refreshToken)
}

// UpdateWalletBalance mocks base method.
func (m *MockRepository) UpdateWalletBalance(walletID uint64, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalance", walletID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockRepositoryMockRecorder) UpdateWalletBalance(walletID, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockRepository)(nil).UpdateWalletBalance), walletID, balance)
}
